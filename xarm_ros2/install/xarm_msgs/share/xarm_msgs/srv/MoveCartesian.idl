// generated from rosidl_adapter/resource/srv.idl.em
// with input from xarm_msgs/srv/MoveCartesian.srv
// generated code does not contain a copyright notice


module xarm_msgs {
  module srv {
    @verbatim (language="comment", text=
      "This format is suitable for the following services" "\n"
      "  - set_position" "\n"
      "  - set_tool_position" "\n"
      "  - set_position_aa" "\n"
      "  - set_servo_cartesian" "\n"
      "  - set_servo_cartesian_aa")
    struct MoveCartesian_Request {
      @verbatim (language="comment", text=
        "set_position/set_tool_position/set_position_aa/set_servo_cartesian/set_servo_cartesian_aa")
      sequence<float> pose;

      @default (value=0.0)
      float speed;

      @default (value=0.0)
      float acc;

      @default (value=0.0)
      float mvtime;

      @verbatim (language="comment", text=
        "set_position/set_position_aa/set_tool_position")
      @default (value=FALSE)
      boolean wait;

      @default (value=-1.0)
      float timeout;

      @verbatim (language="comment", text=
        "set_position/set_tool_position/set_position_aa")
      @default (value=-1.0)
      float radius;

      @verbatim (language="comment", text=
        "set_position_aa/set_servo_cartesian/set_servo_cartesian_aa")
      @default (value=FALSE)
      boolean is_tool_coord;

      @verbatim (language="comment", text=
        "set_position_aa/set_servo_cartesian_aa")
      @default (value=FALSE)
      boolean relative;

      @verbatim (language="comment", text=
        "set_position/set_tool_position/set_position_aa" "\n"
        "  motion_type == 0: default, linear planning" "\n"
        "  motion_type == 1: prioritize linear planning, and turn to IK for joint planning when linear planning is not possible" "\n"
        "  motion_type == 2: direct transfer to IK using joint planning" "\n"
        "  Note:" "\n"
        "      1. only available if firmware_version >= 1.11.100" "\n"
        "      2. when motion_type is 1 or 2, linear motion cannot be guaranteed" "\n"
        "      3. once IK is transferred to joint planning, the given Cartesian velocity and acceleration are converted into joint velocity and acceleration according to the percentage" "\n"
        "          speed = speed / max_tcp_speed * max_joint_speed" "\n"
        "          acc = acc / max_tcp_acc * max_joint_acc" "\n"
        "      4. if there is no suitable IK, a C40 error will be triggered")
      @default (value=0)
      uint8 motion_type;
    };
    struct MoveCartesian_Response {
      int16 ret;

      string message;
    };
  };
};
